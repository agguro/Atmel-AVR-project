    
    
    ldi     ZL,LOW(2*message)			; load Z pointer with
    ldi     ZH,HIGH(2*message)		; myStr address
	rcall	transmit_string				; transmit string
        
end:
    rjmp end

serial_init:
    ;baud prescale (bps) = F_CPU / 16 / baud - 1 = 16000000/16/9600-1=103 (rounded)
    ldi     r16,103
    clr     r17
    sts     0xc5,r17                ;set baud rate to 9600
    sts     0xc4,r16
    ldi     r16,(1<<4)|(1<<3)       ;enable receiver and transmitter
    sts     0xc1, r16
    ldi     r16,0b00001110          ;set frame format to async, no parity, 8 data bits and 1 stop bit
    sts     0xc2,r16
    ret

serial_receive:
    lds r16, 0xc0    ;get value in USART Control and Status Register A
    sbrs r16,0x07       ;if receive is complete skip next instruction
    rjmp serial_receive
    lds r19, 0xc6    ;load value in USART I/O data register into r19
    ret
    
serial_transmit:
    lds r16,0xc0    ;wait for transmit buffer to empty
    sbrs r16,0x05
    rjmp serial_transmit
    sts 0xc6, r19    ;put data to buffer
    ret

;**************************************************************
;* subroutine: UART_Init
;*
;* inputs: r17:r16 - baud rate prescale
;*
;* enables UART transmission with 8 data, 1 parity, no stop bit
;* at input baudrate
;*
;* registers modified: r16
;* use:
;*  .equ    baud    = 9600                  ; baudrate
;*  .equ    bps     = (F_CPU/16/baud) - 1   ; baud prescale
;
;*  ldi     r16,LOW(bps)                    ; load baud prescale
;*  ldi     r17,HIGH(bps)                   ; into r17:r16
;*
;*  rcall   initUART                        ; call initUART subroutine
;**************************************************************

UART_Init:
    sts     0xc4,r16                ; load baud prescale
    sts     0xc5,r17                ; to UBRR0
    ldi     r16,(1<<0x03)|(1<<0x04) ; enable transmitter
    sts     0xc1,r16                ; and receiver
    ret                             ; return from subroutine

;**************************************************************
;* subroutine: putc
;*
;* inputs: r16 - character to transmit
;*
;* transmits single ASCII character via UART
;*
;* registers modified: r17
;**************************************************************

putc:
    lds	r17,UCSR0A			; load UCSR0A into r17
	sbrs	r17,UDRE0			; wait for empty transmit buffer
	rjmp	putc				; repeat loop

	sts	UDR0,r16			; transmit character

	ret					; return from subroutine

;**************************************************************
;* subroutine: puts
;*
;* inputs: ZH:ZL - Program Memory address of string to transmit
;*
;* transmits null terminated string via UART
;*
;* registers modified: r16,r17,r30,r31
;**************************************************************

puts:	lpm	r16,Z+				; load character from pmem
	cpi	r16,$00				; check if null
	breq	puts_end			; branch if null

puts_wait:
	lds	r17,UCSR0A			; load UCSR0A into r17
	sbrs	r17,UDRE0			; wait for empty transmit buffer
	rjmp	puts_wait			; repeat loop

	sts	UDR0,r16			; transmit character
	rjmp	puts				; repeat loop

puts_end:
	ret					; return from subroutine

;**************************************************************
;* subroutine: getc
;*
;* inputs: none
;*
;* outputs:	r16 - character received
;*
;* receives single ASCII character via UART
;*
;* registers modified: r16, r17
;**************************************************************

getc:

    lds	r17,UCSR0A			; load UCSR0A into r17
	sbrs	r17,UDRE0			; wait for empty transmit buffer
	rjmp	getc				; repeat loop

	lds	UDR0,r16			; get received character

	ret					; return from subroutine

;**************************************************************
;* subroutine: gets
;*
;* inputs: XH:XL - SRAM buffer address for rcv'd string
;*
;* outputs: none
;*
;* receives characters via UART and stores in data memory
;* until carriage return received
;*
;* registers modified: r16, r17, XL, XH
;**************************************************************

gets:
    lds	r17,0xc0			; load UCSR0A into r17
	sbrs	r17,0x05			; wait for empty transmit buffer
	rjmp	putc				; repeat loop

	lds	0xc6,r16			; get received character

	cpi	r16,$0D				; check if rcv'd char is CR
	breq	gets_end			; branch if CR rcv'd

	st	X+,r16				; store character to buffer
	rjmp	gets				; get another character

gets_end:
	ret					; return from subroutine

transmit_string:
    lpm     r16,Z+                  ;load character from pmem
    cpi     r16,$00                 ;check if null
    breq    transmit_string_end     ;branch if null
transmit_string_wait:
    lds     r17,0xc0                ;load UCSR0A into r17
    sbrs    r17,0x05                ;wait for empty transmit buffer
    rjmp    transmit_string_wait    ;repeat loop
    sts     0xc6,r16                ;transmit character
    rjmp    transmit_string         ;repeat loop
transmit_string_end:
    ret

message:    .db     "Hello world.",0x0a,0x00
